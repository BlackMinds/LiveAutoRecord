diff --git a/types/hooks.d.ts b/types/hooks.d.ts
index bd3bc9355cde211a23bb61a44eeeed6e9a62f2d1..42749a65e5de855ebb2a75452085a1e31de8c666 100644
--- a/types/hooks.d.ts
+++ b/types/hooks.d.ts
@@ -67,8 +67,8 @@ export interface ModelHooks<M extends Model = Model, TAttributes = any> {
 
 export interface SequelizeHooks<
   M extends Model<TAttributes, TCreationAttributes> = Model,
-  TAttributes = any,
-  TCreationAttributes = TAttributes
+  TAttributes extends object = any,
+  TCreationAttributes extends object = TAttributes
 > extends ModelHooks<M, TAttributes> {
   beforeDefine(attributes: ModelAttributes<M, TCreationAttributes>, options: ModelOptions<M>): void;
   afterDefine(model: ModelType): void;
diff --git a/types/model.d.ts b/types/model.d.ts
index c20f9a3010d55ba7f0b7999591e17f5c219bafa8..4e0bce1a25b5037a6529f77b546f7d7beb8d1bbf 100644
--- a/types/model.d.ts
+++ b/types/model.d.ts
@@ -3249,7 +3249,7 @@ export abstract class Model<TModelAttributes extends {} = any, TCreationAttribut
 }
 
 /** @deprecated use ModelStatic */
-export type ModelType<TModelAttributes = any, TCreationAttributes = TModelAttributes> = new () => Model<TModelAttributes, TCreationAttributes>;
+export type ModelType<TModelAttributes extends object = any, TCreationAttributes extends object = TModelAttributes> = new () => Model<TModelAttributes, TCreationAttributes>;
 
 type NonConstructorKeys<T> = ({[P in keyof T]: T[P] extends new () => any ? never : P })[keyof T];
 type NonConstructor<T> = Pick<T, NonConstructorKeys<T>>;
@@ -3257,7 +3257,7 @@ type NonConstructor<T> = Pick<T, NonConstructorKeys<T>>;
 /** @deprecated use ModelStatic */
 export type ModelCtor<M extends Model> = ModelStatic<M>;
 
-export type ModelDefined<S, T> = ModelStatic<Model<S, T>>;
+export type ModelDefined<S extends object, T extends object> = ModelStatic<Model<S, T>>;
 
 // remove the existing constructor that tries to return `Model<{},{}>` which would be incompatible with models that have typing defined & replace with proper constructor.
 export type ModelStatic<M extends Model> = NonConstructor<typeof Model> & { new(): M };
