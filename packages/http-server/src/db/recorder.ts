import { DataTypes, Model, ModelAttributes, Sequelize } from 'sequelize'
import { AutoGeneratedAttrs } from './utils'
import { SerializedRecorder } from '@autorecord/manager'

export interface RecorderAttrs extends AutoGeneratedAttrs {
  data: SerializedRecorder
}
export type RecorderAttrsOnlyDefine = Omit<
  RecorderAttrs,
  keyof AutoGeneratedAttrs
>
export type RecorderCreateAttrs = RecorderAttrsOnlyDefine

interface RecorderModel
  extends Model<RecorderAttrs, RecorderCreateAttrs>,
    RecorderAttrs {
  // 这里是放一些关系表的操作函数定义的
}

export function defineRecorderModel(sequelize: Sequelize) {
  const attrs: ModelAttributes<RecorderModel, RecorderAttrsOnlyDefine> = {
    data: DataTypes.JSON,
  }
  const modelCtor = class Recorder extends sequelize.define('Recorder', attrs) {
    // 这里用来定义一些扩展的实例方法，比如 toClient 之类
  }

  // 这个模拟 sequelize.define 对于 class 的处理是为了防止出现一些奇怪的问题，比如 hasMany 无效。
  modelCtor.init(
    // TODO: 这里需要 as 下，不知道是 sequelize 的类型有问题，还是我用法不对。
    // 如果是用法不对，可能是 ModelAttrs 不能继承自 AutoGeneratedAttrs？
    attrs as ModelAttributes<RecorderModel, RecorderAttrs>,
    {
      modelName: modelCtor.name,
      sequelize,
    }
  )

  return modelCtor
}
